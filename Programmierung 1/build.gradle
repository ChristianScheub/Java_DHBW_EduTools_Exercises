buildscript {
    repositories {
        mavenCentral()
    }
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        println "#educational_plugin_checker_version 1"
        def separator = System.lineSeparator()
        def lines = output.toString().split("(?<=${separator})|(?=${separator})")
        for (line in lines) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // JUnit framework for testing
        testImplementation group: 'junit', name: 'junit', version: '4.12'

        // helpful libraries
        implementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'

        // submission system: required libraries
        implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '3.0.1'
        implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '3.0.1'
        implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '3.0.1'
        implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '3.0.1'

        // de-compilation of java byte code: used for checking the source code of implemented java programs
        implementation group: 'org.benf', name: 'cfr', version: '0.152'
        implementation group: 'com.github.javaparser', name: 'javaparser-symbol-solver-core', version: '3.25.6'

        // make things a bit easier: project lombok ;-)
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'

        testCompileOnly 'org.projectlombok:lombok:1.18.30'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    }

    sourceSets {
        main {
            java.srcDir 'src'
        }
        test {
            java.srcDir 'test'
        }
    }

    application {
        //mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""
        mainClass = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""
    }

    if (project.hasProperty("educationalRun") && "true".equalsIgnoreCase(project.getProperty("educationalRun"))) {
        def runOutput = new ByteArrayOutputStream()
        tasks.run.setStandardOutput(runOutput)
        tasks.run.doLast { printOutput(runOutput) }
    }
}

project(':util') {
    dependencies {
        implementation group: 'junit', name: 'junit', version: '4.12'
    }
}

configure(subprojects.findAll { it.name != 'util' }) {
    dependencies {
        implementation project(':util').sourceSets.main.output
        testImplementation project(':util').sourceSets.test.output
    }
}
